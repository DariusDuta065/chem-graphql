# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Content {
  blockID: String!
  blocks: [JSONObject!]!
  groups: [Group!]
  id: Float!
  lastEditedAt: DateTime!
  title: String!
  type: String!
}

input CreateGroupInput {
  grade: Float!
  notes: String = null
  scheduleDay: Float!
  scheduleHour: Float!
  scheduleMinute: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Group {
  contents: [Content!]
  grade: Float!
  id: Float!
  notes: String
  scheduleDay: Float!
  scheduleHour: Float!
  scheduleMinute: Float!
  users: [User!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createGroup(createGroupInput: CreateGroupInput!): Group!
  deleteGroup(groupId: Int!): Boolean!
  deleteUser(userId: Int!): Boolean!
  login(password: String!, username: String!): TokenOutput!
  logout(refreshToken: String!): String!
  refreshContent(contentId: Int!): String!
  refreshContents: String!
  refreshToken(refreshToken: String!): TokenOutput!
  register(userRegisterInput: UserRegisterInput!): User!
  resetPassword(userID: Int!): User!
  updateGroup(updateGroupInput: UpdateGroupInput!): Group!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
  adminRoute: String!
  content(contentId: Int!): Content
  contents: [Content!]!
  group(groupId: Int!): Group
  groups: [Group!]!
  profile: UserData!
  publicRoute: String!
  user(userId: Int!): User
  userRoute: String!
  users: [User!]!
}

type TokenOutput {
  accesstoken: String!
  refreshToken: String
  userData: UserData
}

input UpdateGroupInput {
  contents: [Float!]
  grade: Float!
  id: Float!
  notes: String = null
  scheduleDay: Float!
  scheduleHour: Float!
  scheduleMinute: Float!
  users: [Float!]
}

input UpdateUserInput {
  email: String
  firstName: String
  id: Float!
  lastName: String
}

type User {
  email: String!
  firstName: String!
  group: Group
  id: Int!
  lastName: String!
  password: String!
  role: UserRole!
}

type UserData {
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  role: String!
}

input UserRegisterInput {
  email: String!
  firstName: String!
  lastName: String!
}

enum UserRole {
  Admin
  User
}
